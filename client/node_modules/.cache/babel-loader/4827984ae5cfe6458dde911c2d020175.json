{"ast":null,"code":"import * as SessionAPI from '../util/sessionApiUtil';\nexport const RECEIVE_CURRENT_USER = 'RECEIVE_CURRENT_USER';\nexport const RECEIVE_SESSION_ERRORS = 'RECEIVE_SESSION_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS'; //async actions\n\nexport const receiveCurrentUser = currentUser => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n};\nexport const receiveSessionErrors = sessionErrors => {// return {\n  //   type: RECEIVE_SESSION_ERRORS,\n  //   sessionErrors\n  // };\n};\nexport const clearErrors = () => {// return {\n  //   type: CLEAR_ERRORS\n  // };\n}; //thunk actions\n\nexport const signup = user => async dispatch => {\n  try {\n    const newUserRes = await SessionAPI.signup(user);\n    dispatch(receiveCurrentUser(newUserRes.data));\n  } catch (err) {\n    dispatch(receiveSessionErrors(err.responseJSON));\n  }\n};\nexport const login = user => dispatch => {\n  return SessionAPI.login(user).then(user => {\n    dispatch(receiveCurrentUser(user));\n  }, err => dispatch(receiveSessionErrors(err.responseJSON)));\n};\nexport const logout = () => dispatch => {\n  return SessionAPI.logout().then(user => dispatch(receiveCurrentUser(null)));\n};\nexport const persistUser = user => dispatch => {\n  return dispatch(receiveCurrentUser(user));\n};","map":{"version":3,"sources":["/Users/robertoconnor/Desktop/hbeds/client/src/actions/sessionActions.js"],"names":["SessionAPI","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","CLEAR_ERRORS","receiveCurrentUser","currentUser","type","receiveSessionErrors","sessionErrors","clearErrors","signup","user","dispatch","newUserRes","data","err","responseJSON","login","then","logout","persistUser"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,wBAA5B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB,C,CAEP;;AACA,OAAO,MAAMC,kBAAkB,GAAGC,WAAW,IAAI;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEL,oBADD;AAELI,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,oBAAoB,GAAGC,aAAa,IAAI,CACnD;AACA;AACA;AACA;AACD,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,MAAM,CAC/B;AACA;AACA;AACD,CAJM,C,CAMP;;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI,MAAMC,QAAN,IAAkB;AAC9C,MAAI;AACF,UAAMC,UAAU,GAAG,MAAMb,UAAU,CAACU,MAAX,CAAkBC,IAAlB,CAAzB;AACAC,IAAAA,QAAQ,CAACR,kBAAkB,CAACS,UAAU,CAACC,IAAZ,CAAnB,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZH,IAAAA,QAAQ,CAACL,oBAAoB,CAACQ,GAAG,CAACC,YAAL,CAArB,CAAR;AACD;AACF,CAPM;AASP,OAAO,MAAMC,KAAK,GAAGN,IAAI,IAAIC,QAAQ,IAAI;AACvC,SAAOZ,UAAU,CAACiB,KAAX,CAAiBN,IAAjB,EAAuBO,IAAvB,CAA4BP,IAAI,IAAI;AACzCC,IAAAA,QAAQ,CAACR,kBAAkB,CAACO,IAAD,CAAnB,CAAR;AACD,GAFM,EAEJI,GAAG,IACJH,QAAQ,CAACL,oBAAoB,CAACQ,GAAG,CAACC,YAAL,CAArB,CAHH,CAAP;AAKD,CANM;AAQP,OAAO,MAAMG,MAAM,GAAG,MAAMP,QAAQ,IAAI;AACtC,SAAOZ,UAAU,CAACmB,MAAX,GAAoBD,IAApB,CAAyBP,IAAI,IAClCC,QAAQ,CAACR,kBAAkB,CAAC,IAAD,CAAnB,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMgB,WAAW,GAAGT,IAAI,IAAIC,QAAQ,IAAI;AAC7C,SAAOA,QAAQ,CAACR,kBAAkB,CAACO,IAAD,CAAnB,CAAf;AACD,CAFM","sourcesContent":["import * as SessionAPI from '../util/sessionApiUtil';\n\nexport const RECEIVE_CURRENT_USER = 'RECEIVE_CURRENT_USER';\nexport const RECEIVE_SESSION_ERRORS = 'RECEIVE_SESSION_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\n//async actions\nexport const receiveCurrentUser = currentUser => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n};\n\nexport const receiveSessionErrors = sessionErrors => {\n  // return {\n  //   type: RECEIVE_SESSION_ERRORS,\n  //   sessionErrors\n  // };\n};\n\nexport const clearErrors = () => {\n  // return {\n  //   type: CLEAR_ERRORS\n  // };\n};\n\n//thunk actions\nexport const signup = user => async dispatch => {\n  try {\n    const newUserRes = await SessionAPI.signup(user)\n    dispatch(receiveCurrentUser(newUserRes.data))\n  } catch (err) {\n    dispatch(receiveSessionErrors(err.responseJSON))\n  }\n};\n\nexport const login = user => dispatch => {\n  return(SessionAPI.login(user).then(user => {\n    dispatch(receiveCurrentUser(user))\n  }, err => (\n    dispatch(receiveSessionErrors(err.responseJSON))\n  )));\n};\n\nexport const logout = () => dispatch => {\n  return(SessionAPI.logout().then(user => (\n    dispatch(receiveCurrentUser(null))\n  )));\n};\n\nexport const persistUser = user => dispatch => {\n  return dispatch(receiveCurrentUser(user))\n}\n"]},"metadata":{},"sourceType":"module"}